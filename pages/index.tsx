import type {
  SupabaseRealtimePayload,
  RealtimeSubscription,
} from "@supabase/supabase-js";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import db from "../prisma/db";
import supabase from "../hooks/supabase";
import { useCallback, useEffect, useState } from "react";

type Flower = {
  id: number;
  name: string;
};

export async function getServerSideProps() {
  const flowers: Flower[] = await db.flowers.findMany({
    select: { id: true, name: true },
  });
  return {
    props: {
      flowers: flowers,
    },
  };
}

function Page(props: { flowers: Flower[] }) {
  const [flowers, setFlowers] = useState<Flower[]>([...props.flowers]);
  const [textfieldState, setTextfieldState] = useState("");
  function handleTextfieldChange(e: React.ChangeEvent<HTMLInputElement>) {
    setTextfieldState(e.target.value);
  }
  function handleSubmit(e: React.FormEvent<HTMLButtonElement>) {
    e.preventDefault();
    supabase
      .from("flowers")
      .insert({ name: textfieldState })
      .then(() => {
        setTextfieldState("");
      });
  }
  useEffect(() => {
    const createSubscription = () => {
      return supabase
        .from("flowers")
        .on("INSERT", (payload: SupabaseRealtimePayload<any>) => {
          setFlowers(() => {
            return [...flowers, payload.new];
          });
        })
        .subscribe();
    };
    let mySubscription: RealtimeSubscription | null = null;
    console.log("subscribing to new flowers");
    if (!mySubscription) {
      mySubscription = createSubscription();
    }
    return () => {
      console.log("unsubscribing from new flowers");
      if (mySubscription) {
        mySubscription.unsubscribe();
      }
    };
  });
  return (
    <div className={styles.container}>
      <Head>
        <title>Hi Yaya!!</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <ol style={{ fontSize: 30 }}>
          {flowers.map((flower) => (
            <li key={flower.id}>{flower.name}</li>
          ))}
        </ol>
        <input
          type="text"
          onChange={handleTextfieldChange}
          value={textfieldState}
        />{" "}
        <button onClick={handleSubmit}>Add</button>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}

export default Page;
